-- APP USER TABLE
-- =============================================================================
-- This table stores user authentication and authorization information
-- Each tenant has isolated user management
CREATE TABLE IF NOT EXISTS app_user (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(20) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL DEFAULT 'USER',
    
    -- Super Admin specific fields
    can_manage_all_tenants BOOLEAN DEFAULT FALSE,
    accessible_tenants VARCHAR(1000),
    is_global_user BOOLEAN DEFAULT FALSE,
    primary_tenant VARCHAR(50),
    
    -- Audit fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    last_login TIMESTAMP
);

-- Create index for faster username lookups
CREATE INDEX IF NOT EXISTS idx_app_user_username ON app_user(username);
CREATE INDEX IF NOT EXISTS idx_app_user_role ON app_user(role);
CREATE INDEX IF NOT EXISTS idx_app_user_active ON app_user(is_active);
CREATE INDEX IF NOT EXISTS idx_app_user_global ON app_user(is_global_user);
CREATE INDEX IF NOT EXISTS idx_app_user_primary_tenant ON app_user(primary_tenant);

-- =============================================================================
-- PRODUCT TABLE
-- =============================================================================
-- This table stores product information for inventory management
-- Each tenant maintains separate product catalogs
CREATE TABLE IF NOT EXISTS product (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sku VARCHAR(100) NOT NULL UNIQUE,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(100) NOT NULL,
    price DECIMAL(15,2) NOT NULL DEFAULT 0.00,
    stock_level INTEGER NOT NULL DEFAULT 0,
    low_stock_threshold INTEGER NOT NULL DEFAULT 5,
    etsy_product_id VARCHAR(100),
    
    -- Audit fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT,
    updated_by BIGINT,
    
    -- Status fields
    is_active BOOLEAN DEFAULT TRUE,
    is_featured BOOLEAN DEFAULT FALSE,
    
    -- Constraints
    CONSTRAINT chk_price_positive CHECK (price >= 0),
    CONSTRAINT chk_stock_level_non_negative CHECK (stock_level >= 0),
    CONSTRAINT chk_low_stock_threshold_positive CHECK (low_stock_threshold > 0),
    CONSTRAINT chk_sku_length CHECK (LENGTH(sku) >= 3),
    CONSTRAINT chk_title_length CHECK (LENGTH(title) >= 3),
    
    -- Foreign key constraints
    CONSTRAINT fk_product_created_by FOREIGN KEY (created_by) REFERENCES app_user(id) ON DELETE SET NULL,
    CONSTRAINT fk_product_updated_by FOREIGN KEY (updated_by) REFERENCES app_user(id) ON DELETE SET NULL
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_product_sku ON product(sku);
CREATE INDEX IF NOT EXISTS idx_product_category ON product(category);
CREATE INDEX IF NOT EXISTS idx_product_title ON product(title);
CREATE INDEX IF NOT EXISTS idx_product_active ON product(is_active);
CREATE INDEX IF NOT EXISTS idx_product_featured ON product(is_featured);
CREATE INDEX IF NOT EXISTS idx_product_stock_level ON product(stock_level);
CREATE INDEX IF NOT EXISTS idx_product_etsy_id ON product(etsy_product_id);

-- Index for low stock monitoring (H2 compatible)
CREATE INDEX IF NOT EXISTS idx_product_low_stock ON product(stock_level, low_stock_threshold);

-- =============================================================================
-- STOCK NOTIFICATION TABLE
-- =============================================================================
-- This table stores stock alerts and notifications
-- Each tenant has isolated notification management
CREATE TABLE IF NOT EXISTS stock_notification (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT NOT NULL,
    message TEXT NOT NULL,
    notification_type VARCHAR(50) DEFAULT 'LOW_STOCK',
    is_read BOOLEAN DEFAULT FALSE,
    
    -- Audit fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    read_at TIMESTAMP,
    read_by BIGINT,
    
    -- Priority and categorization
    priority VARCHAR(20) DEFAULT 'MEDIUM',
    category VARCHAR(50) DEFAULT 'STOCK_ALERT',
    
    -- Constraints
    CONSTRAINT fk_stock_notification_product FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE,
    CONSTRAINT fk_stock_notification_read_by FOREIGN KEY (read_by) REFERENCES app_user(id) ON DELETE SET NULL,
    CONSTRAINT chk_notification_type CHECK (notification_type IN ('LOW_STOCK', 'OUT_OF_STOCK', 'OVERSTOCKED', 'REORDER', 'CUSTOM')),
    CONSTRAINT chk_priority CHECK (priority IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL'))
);

-- Create indexes for notification queries
CREATE INDEX IF NOT EXISTS idx_stock_notification_product ON stock_notification(product_id);
CREATE INDEX IF NOT EXISTS idx_stock_notification_read ON stock_notification(is_read);
CREATE INDEX IF NOT EXISTS idx_stock_notification_created ON stock_notification(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_stock_notification_type ON stock_notification(notification_type);
CREATE INDEX IF NOT EXISTS idx_stock_notification_priority ON stock_notification(priority);

-- Composite index for unread notifications (H2 compatible)
CREATE INDEX IF NOT EXISTS idx_stock_notification_unread_by_date ON stock_notification(is_read, created_at);

-- =============================================================================
-- TENANT CONFIGURATION TABLE (Optional for future extensions)
-- =============================================================================
-- This table can store tenant-specific configurations
CREATE TABLE IF NOT EXISTS tenant_config (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_key VARCHAR(100) NOT NULL,
    config_value TEXT,
    config_type VARCHAR(50) DEFAULT 'STRING',
    description TEXT,
    
    -- Audit fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Constraints
    CONSTRAINT uk_tenant_config_key UNIQUE (config_key),
    CONSTRAINT chk_config_type CHECK (config_type IN ('STRING', 'INTEGER', 'BOOLEAN', 'JSON', 'DECIMAL'))
);

-- Create index for config lookups
CREATE INDEX IF NOT EXISTS idx_tenant_config_key ON tenant_config(config_key);

-- =============================================================================
-- STOCK MOVEMENT TABLE (For inventory tracking)
-- =============================================================================
-- This table tracks all stock movements for audit and reporting purposes
CREATE TABLE IF NOT EXISTS stock_movement (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT NOT NULL,
    movement_type VARCHAR(50) NOT NULL,
    quantity INTEGER NOT NULL,
    previous_stock INTEGER NOT NULL,
    new_stock INTEGER NOT NULL,
    reference_id VARCHAR(100),
    notes TEXT,
    
    -- User tracking
    created_by BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Constraints
    CONSTRAINT fk_stock_movement_product FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE,
    CONSTRAINT fk_stock_movement_created_by FOREIGN KEY (created_by) REFERENCES app_user(id) ON DELETE SET NULL,
    CONSTRAINT chk_movement_type CHECK (movement_type IN ('IN', 'OUT', 'ADJUSTMENT', 'RETURN', 'TRANSFER', 'DAMAGED', 'EXPIRED')),
    CONSTRAINT chk_quantity_not_zero CHECK (quantity != 0)
);

-- Create indexes for stock movement tracking
CREATE INDEX IF NOT EXISTS idx_stock_movement_product ON stock_movement(product_id);
CREATE INDEX IF NOT EXISTS idx_stock_movement_type ON stock_movement(movement_type);
CREATE INDEX IF NOT EXISTS idx_stock_movement_created ON stock_movement(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_stock_movement_reference ON stock_movement(reference_id);

-- =============================================================================
-- VIEWS FOR REPORTING AND MONITORING
-- =============================================================================

-- View for low stock products
CREATE VIEW v_low_stock_products AS
SELECT 
    p.id,
    p.sku,
    p.title,
    p.category,
    p.stock_level,
    p.low_stock_threshold,
    p.price,
    (CAST(p.stock_level AS DECIMAL) / p.low_stock_threshold) * 100 AS stock_percentage,
    p.updated_at AS last_updated
FROM product p
WHERE p.stock_level <= p.low_stock_threshold 
  AND p.is_active = TRUE
ORDER BY stock_percentage ASC, p.stock_level ASC;

-- View for user activity summary
CREATE VIEW v_user_activity AS
SELECT 
    u.id,
    u.username,
    u.role,
    u.last_login,
    u.is_active,
    COUNT(DISTINCT p.id) AS products_created,
    COUNT(DISTINCT sm.id) AS stock_movements
FROM app_user u
    LEFT JOIN product p ON u.id = p.created_by
    LEFT JOIN stock_movement sm ON u.id = sm.created_by
WHERE u.is_active = TRUE
GROUP BY u.id, u.username, u.role, u.last_login, u.is_active
ORDER BY u.username;

-- View for notification summary
CREATE VIEW v_notification_summary AS
SELECT 
    notification_type,
    priority,
    COUNT(*) AS total_count,
    COUNT(CASE WHEN is_read = FALSE THEN 1 END) AS unread_count,
    MIN(created_at) AS oldest_notification,
    MAX(created_at) AS newest_notification
FROM stock_notification
GROUP BY notification_type, priority
ORDER BY priority DESC, notification_type;


